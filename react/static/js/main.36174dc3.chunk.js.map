{"version":3,"sources":["types/EPageStatus.ts","context/AppContext.ts","components/Header.tsx","components/Footer.tsx","containers/home/HomeIndex.tsx","components/Loader.tsx","configuration.ts","services/base-service.ts","containers/meal-types/MealTypeIndex.tsx","types/EResponseStatus.ts","containers/meal-types/MealTypeCreate.tsx","components/Alert.tsx","containers/meal-types/MealTypeEdit.tsx","containers/meal-types/MealTypeDetails.tsx","containers/meal-types/MealTypeDelete.tsx","services/identity-service.ts","containers/identity/Login.tsx","containers/Page404.tsx","containers/PageForm.tsx","App.tsx","index.tsx"],"names":["EPageStatus","initialAppState","jwt","firstName","lastName","setAuthInfo","AppContext","React","createContext","AppContextProvider","Provider","Consumer","Header","appState","useContext","className","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","onClick","Footer","HomeIndex","Loader","props","pageStatus","Loading","Error","statusCode","ApiBaseUrl","BaseService","headers","Authorization","apiEndpoint","this","axios","get","GetAxiosConfig","response","ok","status","data","error","messages","id","endPointUrl","delete","entity","entityDataJson","JSON","stringify","post","put","Axios","create","baseURL","EResponseStatus","RowDisplay","mealType","mealTypeName","price","MealTypeIndex","useState","mealTypes","setMealTypes","setPageStatus","loadData","a","GetAll","result","OK","useEffect","map","EAlertClass","MealTypeCreate","setMealType","responseStatus","Unfinished","setResponseStatus","createClicked","e","preventDefault","Create","onSubmit","nativeEvent","htmlFor","value","onChange","target","name","placeholder","parseFloat","step","MealTypeEdit","useParams","editClicked","Put","GetOne","console","log","MealTypeDetails","setPageSatus","MealTypeDelete","deleteData","Delete","Alert","show","alertClass","role","message","IdentityService","loginData","loginDataJson","Login","email","password","setLoginData","alertMessage","setAlertMessage","logInCliced","firstname","lastname","Danger","autoComplete","Page404","FormView","values","input","handleChange","checked","checkbox","radio","textarea","rows","select","initialFormValues","PageForm","formValues","setFormValues","App","setAppState","exact","path","component","ReactDOM","render","basename","process","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.36174dc3.chunk.js","sourcesContent":["export enum EPageStatus {\n    Loading = \"Loading...\",\n    Error = \"Error...\",\n    OK = \"OK\",\n}","import React from \"react\";\n\nexport interface IAppState {\n    jwt: string | null;\n    firstName: string;\n    lastName: string;\n    setAuthInfo: (jwt: string | null, firstName: string, lastName: string) => void;\n}\n\nexport const initialAppState: IAppState = {\n    jwt: null,\n    firstName: '',\n    lastName: '',\n    setAuthInfo: (jwt: string | null, firstName: string, lastName: string): void => {}\n}\n\nexport const AppContext = React.createContext<IAppState>(initialAppState);\nexport const AppContextProvider = AppContext.Provider;\nexport const AppContextConsumer = AppContext.Consumer;\n","import React, { useContext } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { AppContext } from \"../context/AppContext\";\n\nconst Header = () => {\n\n    const appState = useContext(AppContext);\n\n    return (\n        <header>\n\n            <nav className=\"navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3\">\n                <div className=\"container\">\n                    <NavLink className=\"navbar-brand\" to=\"/\">Home</NavLink>\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\".navbar-collapse\" aria-controls=\"navbarSupportedContent\"\n                        aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        <span className=\"navbar-toggler-icon\"></span>\n                    </button>\n                    <div className=\"navbar-collapse collapse d-sm-inline-flex justify-content-between\">\n                        <ul className=\"navbar-nav flex-grow-1\">\n\n                            <li>\n                                <NavLink className=\"nav-link text-dark\" to=\"/MealTypes\">Meal Types</NavLink>\n                            </li>\n\n                            <li>\n                                <NavLink className=\"nav-link text-dark\" to=\"/form\">FormDemo</NavLink>\n                            </li>\n\n                        </ul>\n                        <ul className=\"navbar-nav\">\n                            {appState.jwt === null ?\n                                <li className=\"nav-item\">\n                                    <NavLink className=\"nav-link text-dark\" to=\"/identity/login\">Login</NavLink>\n                                </li>\n                                :\n                                <>\n                                    <li className=\"nav-item\">\n                                        <span className=\"nav-link text-dark\">{appState.firstName + ' ' + appState.lastName}</span>\n                                    </li>\n                                    <li className=\"nav-item\">\n                                        <button onClick={() => appState.setAuthInfo(null, '','')} className=\"btn btn-link nav-link text-dart\">Logout</button>\n                                    </li>\n                                </>\n                            }\n                        </ul>\n\n                    </div>\n                </div>\n            </nav>\n        </header>\n    );\n}\n\nexport default Header;","const Footer = () => {\n    return (\n        <footer className=\"border-top footer text-muted\">\n            <div className=\"container\">\n                &copy; 2021 - React client\n            </div>\n        </footer>\n    );\n}\n\nexport default Footer;\n","const HomeIndex = () => {\n    return (\n        <div>\n            Home Index\n        </div>\n    );\n}\n\nexport default HomeIndex;\n","import { EPageStatus } from \"../types/EPageStatus\";\n\nconst Loader = (props: { pageStatus: EPageStatus, statusCode: number }) => {\n\n    if (props.pageStatus === EPageStatus.Loading) {\n        return <div className=\"alert alert-primary\">Loading...</div>\n    }\n\n    if (props.pageStatus === EPageStatus.Error) {\n        return <div className=\"alert alert-danger\">Error... {props.statusCode}</div>\n    }\n    return <></>\n}\n\nexport default Loader;\n","export const ApiBaseUrl = \"https://kindergarten-ms.azurewebsites.net/api/v1\"","import Axios, { AxiosError, AxiosRequestConfig } from 'axios';\nimport { ApiBaseUrl } from '../configuration';\nimport { IFetchResponse } from '../types/IFetchResponse';\nimport { IMessages } from '../types/IMessages';\n\nexport abstract class BaseService {\n    protected static axios = Axios.create({\n        baseURL: ApiBaseUrl,\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n\n    protected static GetAxiosConfig(jwt?: string): AxiosRequestConfig | undefined {\n        if (!jwt) return undefined;\n\n        const config: AxiosRequestConfig = {\n            headers: {\n                Authorization: 'Bearer ' + jwt\n            }\n        }\n        return config;\n    }\n\n    static async GetAll<TEntity>(apiEndpoint: string, jwt?: string): Promise<IFetchResponse<TEntity[]>> {\n        try {\n            let response = await this.axios.get<TEntity[]>(apiEndpoint, BaseService.GetAxiosConfig(jwt));\n            return {\n                ok: response.status <= 299,\n                statusCode: response.status,\n                data: response.data\n            };\n        }\n        catch (err) {\n            let error = err as AxiosError;\n            return {\n                ok: false,\n                statusCode: error.response?.status ?? 500,\n                messages: (error.response?.data as IMessages).messages\n            }\n        }\n    }\n\n    static async GetOne<TEntity>(apiEndpoint: string, id: string, jwt?: string): Promise<IFetchResponse<TEntity>> {\n        const endPointUrl = apiEndpoint + '/' + id;\n        try {\n            let response = await this.axios.get<TEntity>(endPointUrl, BaseService.GetAxiosConfig(jwt));\n            return {\n                ok: response.status <= 299,\n                statusCode: response.status,\n                data: response.data\n            }\n        }\n        catch (err) {\n            let error = err as AxiosError;\n            return {\n                ok: false,\n                statusCode: error.response?.status ?? 500,\n                messages: (error.response?.data as IMessages).messages\n            }\n        }\n    }\n\n    static async Delete<TEntity>(apiEndpoint: string, id: string, jwt?: string): Promise<IFetchResponse<TEntity>> {\n        const endPointUrl = apiEndpoint + '/' + id;\n        try {\n            let response = await this.axios.delete(endPointUrl, BaseService.GetAxiosConfig(jwt));\n            return {\n                ok: response.status <= 299,\n                statusCode: response.status,\n                data: response.data\n            }\n        } catch (err) {\n            let error = err as AxiosError;\n            return {\n                ok: false,\n                statusCode: error.response?.status ?? 500,\n                messages: (error.response?.data as IMessages).messages\n            }\n        }\n    }\n\n    static async Create<TEntity>(apiEndpoint: string, entity: TEntity, jwt?: string): Promise<IFetchResponse<TEntity>> {\n        let entityDataJson = JSON.stringify(entity);\n        \n        try {\n            let response = await this.axios.post(apiEndpoint, entityDataJson);\n            return {\n                ok: response.status <= 299,\n                statusCode: response.status,\n                data: response.data\n            }\n        }\n        catch (err) {\n            let error = err as AxiosError;\n            return {\n                ok: false,\n                statusCode: error.response?.status ?? 500,\n                messages: (error.response?.data as IMessages).messages\n            }\n        }\n    }\n\n    static async Put<TEntity>(apiEndpoint: string, id: string, entity: TEntity, jwt?: string): Promise<IFetchResponse<TEntity>> {\n        const endPointUrl = apiEndpoint + '/' + id;\n        let entityDataJson = JSON.stringify(entity);\n        \n        try {\n            let response = await this.axios.put(endPointUrl, entityDataJson, BaseService.GetAxiosConfig());\n            return {\n                ok: response.status <= 299,\n                statusCode: response.status,\n                data: response.data\n            }\n        }\n        catch (err) {\n            let error = err as AxiosError;\n            return {\n                ok: false,\n                statusCode: error.response?.status ?? 500,\n                messages: (error.response?.data as IMessages).messages\n            }\n        }\n    }\n}","import React, { useEffect, useState } from \"react\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport Loader from \"../../components/Loader\";\nimport { IMealType } from \"../../dto/IMealType\";\nimport { BaseService } from \"../../services/base-service\";\nimport { EPageStatus } from \"../../types/EPageStatus\";\n\nconst RowDisplay = (props: { mealType: IMealType }) => (\n    <tr>\n        <td>\n            {props.mealType.mealTypeName}\n        </td>\n        <td>\n            {props.mealType.price}\n        </td>\n        <td>\n            <Link to={'/MealTypes/edit/' + props.mealType.id}>Edit</Link> |\n            <Link to={'/MealTypes/' + props.mealType.id}> Details</Link> |\n            <Link to={'/MealTypes/delete/' + props.mealType.id}> Delete</Link>\n        </td>\n    </tr>\n)\n\nconst MealTypeIndex = () => {\n    const [mealTypes, setMealTypes] = useState([] as IMealType[]);\n    const [pageStatus, setPageStatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\n\n    const loadData = async () => {\n        let result = await BaseService.GetAll<IMealType>('/mealtypes')\n        if (result.ok && result.data) {\n            setPageStatus({ pageStatus: EPageStatus.OK, statusCode: 0 })\n            setMealTypes(result.data);\n        } else {\n            setPageStatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode })\n        }\n    }\n\n    useEffect(() => {\n        loadData();\n    }, [])\n\n    return (\n        <>\n            <h1>Meal Types page</h1>\n           \n            <p>\n                <NavLink to=\"/MealTypes/Create\">Create new</NavLink>\n            </p>\n\n            <table className=\"table\">\n                <thead>\n                    <tr>\n                        <th>\n                            Meal Type\n                        </th>\n                        <th>\n                            Price\n                        </th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {mealTypes.map(mealType =>\n                        <RowDisplay mealType={mealType} key={mealType.id} />)\n                    }\n                </tbody>\n            </table>\n            <Loader {...pageStatus} />\n        </>\n    );\n}\n\nexport default MealTypeIndex;\n","export enum EResponseStatus {\n    OK = \"OK\",\n    Unfinished = \"Unfinished\",\n    Error = \"Error\"\n}","import React, { useState } from \"react\";\nimport { NavLink, Redirect } from \"react-router-dom\";\nimport { IMealType } from \"../../dto/IMealType\";\nimport { BaseService } from \"../../services/base-service\";\nimport { EResponseStatus } from \"../../types/EResponseStatus\";\n\nconst MealTypeCreate = () => {\n\n    const [mealType, setMealType] = useState({mealTypeName: '', price: 0} as IMealType);\n    const [responseStatus, setResponseStatus] = useState({ responseStatus: EResponseStatus.Unfinished })\n\n    const createClicked = async (e: Event) => {\n        e.preventDefault();\n        let response = await BaseService.Create('/MealTypes', mealType);\n        if (!response.ok) {\n            setResponseStatus({ responseStatus: EResponseStatus.Error })\n        } else {\n            setResponseStatus({ responseStatus: EResponseStatus.OK })\n        }\n    }\n\n    return (\n\n        <>\n            { responseStatus.responseStatus === EResponseStatus.OK ? <Redirect to=\"/MealTypes\" /> : null}\n\n            <h1>Create</h1>\n\n            <h4>Meal Type</h4>\n            <hr />\n            <form onSubmit={(e) => createClicked(e.nativeEvent)}>\n                <div className=\"row\">\n                    <div className=\"col-md-4\">\n                        <section>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"Input_Name\">Meal Type name</label>\n                                <input value={mealType.mealTypeName} onChange={e => setMealType({ ...mealType, mealTypeName: e.target.value })} className=\"form-control\" type=\"text\" id=\"Input_Name\" name=\"Input.Name\" placeholder=\"Meal type name..\" />\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"Input_Price\">Price</label>\n                                <input value={mealType.price} onChange={e => setMealType({ ...mealType, price: parseFloat(e.target.value) })} className=\"form-control\" type=\"number\" step=\"0.1\" id=\"Input_Price\" name=\"Input.Price\" placeholder=\"Price..\" />\n                            </div>\n                            <div className=\"form-group\">\n                                <button onClick={(e) => createClicked(e.nativeEvent)} type=\"submit\" className=\"col-4 btn btn-primary\">Create</button>\n                            </div>\n                        </section>\n                    </div>\n                </div>\n            </form>\n            <div className=\"row\">\n                <div className=\"col-md-4\">\n                    <NavLink to=\"/MealTypes\" className=\"col-4 btn btn-primary\">Back to list</NavLink>\n                </div>\n            </div>\n\n        </>\n    );\n}\n\nexport default MealTypeCreate;\n","export enum EAlertClass {\n    Primary = 'alert-primary',\n    Secondary = 'alert-secondary',\n    Success = 'alert-success',\n    Danger = 'alert-danger',\n    Warning = 'alert-warning',\n    Info = 'alert-info',\n    Light = 'alert-light',\n    Dark = 'alert-dark',\n}\n\nconst Alert = (props: {show: boolean, message: string, alertClass: EAlertClass }) => {\n    \n    return props.show ? <div className={'alert ' + props.alertClass} role=\"alert\">{props.message}</div> : null;\n}\n\nexport default Alert;","import React, { useEffect, useState } from \"react\";\nimport { NavLink, Redirect, useParams } from \"react-router-dom\";\nimport { IMealType } from \"../../dto/IMealType\";\nimport { BaseService } from \"../../services/base-service\";\nimport { EResponseStatus } from \"../../types/EResponseStatus\";\nimport { IRouteId } from \"../../types/IRouteId\";\n\nconst MealTypeEdit = () => {\n    let { id } = useParams() as IRouteId;\n\n    const [mealType, setMealType] = useState({mealTypeName: '', price: 0} as IMealType);\n    const [responseStatus, setResponseStatus] = useState({ responseStatus: EResponseStatus.Unfinished })\n\n\n    const editClicked = async (e: Event) => {\n        e.preventDefault();\n        let response = await BaseService.Put('/MealTypes', id, mealType);\n        if (!response.ok) {\n            setResponseStatus({ responseStatus: EResponseStatus.Error })\n        } else {\n            setResponseStatus({ responseStatus: EResponseStatus.OK })\n        }\n    }\n\n    const loadData = async () => {\n        let result = await BaseService.GetOne<IMealType>('/mealtypes', id);\n        if (result.ok && result.data) {\n            setMealType(result.data);\n        } else {\n            console.log(\"Error\")\n        }\n    }\n\n    useEffect(() => {\n        loadData();\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return (\n        <>\n            { responseStatus.responseStatus === EResponseStatus.OK ? <Redirect to=\"/MealTypes\" /> : null}\n\n            <h1>Edit</h1>\n\n            <h4>Meal Type</h4>\n            <hr />\n            <form onSubmit={(e) => editClicked(e.nativeEvent)}>\n                <div className=\"row\">\n                    <div className=\"col-md-4\">\n                        <section>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"Input_Name\">Meal Type name</label>\n                                <input value={mealType.mealTypeName} onChange={e => setMealType({ ...mealType, mealTypeName: e.target.value })} className=\"form-control\" type=\"text\" id=\"Input_Name\" name=\"Input.Name\" />\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"Input_Price\">Price</label>\n                                <input value={mealType.price} onChange={e => setMealType({ ...mealType, price: parseFloat(e.target.value) })} className=\"form-control\" type=\"number\" step=\"0.1\" id=\"Input_Price\" name=\"Input.Price\" />\n                            </div>\n                            <div className=\"form-group\">\n                                <button onClick={(e) => editClicked(e.nativeEvent)} type=\"submit\" className=\"col-4 btn btn-primary\">Edit</button>\n                            </div>\n                        </section>\n                    </div>\n                </div>\n            </form>\n            <div className=\"row\">\n                <div className=\"col-md-4\">\n                    <NavLink to=\"/MealTypes\" className=\"col-4 btn btn-primary\">Back to list</NavLink>\n                </div>\n            </div>\n\n        </>\n    );\n}\n\nexport default MealTypeEdit;\n","import React, { useEffect, useState } from \"react\";\nimport { NavLink, useParams } from \"react-router-dom\";\nimport Loader from \"../../components/Loader\";\nimport { IMealType } from \"../../dto/IMealType\";\nimport { BaseService } from \"../../services/base-service\";\nimport { EPageStatus } from \"../../types/EPageStatus\";\nimport { IRouteId } from \"../../types/IRouteId\";\n\nconst MealTypeDetails = () => {\n    // Get the router params from hook\n    let { id } = useParams() as IRouteId;\n\n    const [mealType, setMealType] = useState({} as IMealType);\n    const [pageStatus, setPageSatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\n\n    const loadData = async () => {\n        let result = await BaseService.GetOne<IMealType>('/mealtypes', id);\n        if (result.ok && result.data) {\n            setPageSatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\n            setMealType(result.data);\n        } else {\n            setPageSatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode })\n        }\n    }\n\n    useEffect(() => {\n        loadData();\n        \n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return (\n        <>\n            <h1>\n                Meal Type details.\n            </h1>\n            <hr />\n\n            <div>\n                <h4>Meal Type</h4>\n                <hr />\n                <Loader {...pageStatus} />\n\n                <dl className=\"row\">\n                    <dt className=\"col-sm-2\">\n                        Id\n                    </dt>\n                    <dd className=\"col-sm-10\">\n                        {mealType.id}\n                    </dd>\n                    <dt className=\"col-sm-2\">\n                        Meal Type\n                    </dt>\n                    <dd className=\"col-sm-10\">\n                        {mealType.mealTypeName}\n                    </dd>\n                    <dt className=\"col-sm-2\">\n                        Price\n                    </dt>\n                    <dd className=\"col-sm-10\">\n                        {mealType.price}\n                    </dd>\n                </dl>\n            </div>\n            <hr />\n            <NavLink to=\"/MealTypes\" className=\"col-2 btn btn-primary\">Back to list</NavLink>\n\n        </>\n    );\n}\n\nexport default MealTypeDetails;\n","import React, { useEffect, useState } from \"react\";\nimport { NavLink, Redirect, useParams } from \"react-router-dom\";\nimport Loader from \"../../components/Loader\";\nimport { IMealType } from \"../../dto/IMealType\";\nimport { BaseService } from \"../../services/base-service\";\nimport { EPageStatus } from \"../../types/EPageStatus\";\nimport { EResponseStatus } from \"../../types/EResponseStatus\";\nimport { IRouteId } from \"../../types/IRouteId\";\n\nconst MealTypeDelete = () => {\n\n    let { id } = useParams() as IRouteId;\n\n    const [mealType, setMealType] = useState({} as IMealType);\n    const [pageStatus, setPageSatus] = useState({ pageStatus: EPageStatus.Loading, statusCode: -1 });\n    const [responseStatus, setResponseStatus] = useState({ responseStatus: EResponseStatus.Unfinished })\n\n    const loadData = async () => {\n        let result = await BaseService.GetOne<IMealType>('/mealtypes', id);\n        if (result.ok && result.data) {\n            setPageSatus({ pageStatus: EPageStatus.OK, statusCode: 0 });\n            setMealType(result.data);\n        } else {\n            setPageSatus({ pageStatus: EPageStatus.Error, statusCode: result.statusCode })\n        }\n    }\n\n    useEffect(() => {\n        loadData();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const deleteData = async (e: Event) => {\n        e.preventDefault();\n        let result = await BaseService.Delete('/mealtypes', id);\n        if (result.statusCode === 204) {\n            setResponseStatus({ responseStatus: EResponseStatus.OK })\n        } else {\n            setResponseStatus({ responseStatus: EResponseStatus.Error })\n        }\n    }\n\n    return (\n        <>\n            { responseStatus.responseStatus === EResponseStatus.OK ? <Redirect to=\"/MealTypes\" /> : null}\n\n            <h1>Delete</h1>\n\n            <h3>Are you sure you want to delete this?</h3>\n            <div>\n                <h4>Meal Type</h4>\n                <hr />\n                <Loader {...pageStatus} />\n\n                <dl className=\"row\">\n                    <dt className=\"col-sm-2\">\n                        Id\n                    </dt>\n                    <dd className=\"col-sm-10\">\n                        {mealType.id}\n                    </dd>\n                    <dt className=\"col-sm-2\">\n                        Meal Type\n                    </dt>\n                    <dd className=\"col-sm-10\">\n                        {mealType.mealTypeName}\n                    </dd>\n                    <dt className=\"col-sm-2\">\n                        Price\n                    </dt>\n                    <dd className=\"col-sm-10\">\n                        {mealType.price}\n                    </dd>\n                </dl>\n                <div className=\"row\">\n                    <NavLink to=\"/MealTypes\" className=\"col-2 btn btn-primary\">Back to list</NavLink>\n                    <button onClick={(e) => deleteData(e.nativeEvent)} type=\"submit\" className=\"col-2 btn btn-danger\" >Delete</button>\n                </div>\n\n            </div>\n        </>\n    );\n}\n\nexport default MealTypeDelete;\n","import axios, { AxiosError } from \"axios\";\nimport { ApiBaseUrl } from \"../configuration\";\nimport { IFetchResponse } from \"../types/IFetchResponse\";\nimport { ILoginResponse } from \"../types/ILoginResponse\";\nimport { IMessages } from \"../types/IMessages\";\n\nexport abstract class IdentityService {\n    protected static axios = axios.create({\n        baseURL: ApiBaseUrl,\n        headers: {\n            'Content-type': 'application/json'\n        }\n    });\n\n    static async Login(apiEndpoint: string, loginData: {email: string, password: string}): Promise<IFetchResponse<ILoginResponse>> {\n        let loginDataJson = JSON.stringify(loginData);\n        try {\n            let response = await this.axios.post<ILoginResponse>(apiEndpoint, loginDataJson);\n            return {\n                ok: response.status <= 299,\n                statusCode: response.status,\n                data: response.data\n            };\n        }\n        catch (err) {\n            let error = err as AxiosError;\n            return {\n                ok: false,\n                statusCode: error.response?.status ?? 500,\n                messages: (error.response?.data as IMessages).messages,                \n            }\n        }\n    }\n}","import React, { useContext, useState } from \"react\";\nimport { Redirect } from \"react-router\";\nimport Alert, { EAlertClass } from \"../../components/Alert\";\nimport { AppContext } from \"../../context/AppContext\";\nimport { IdentityService } from \"../../services/identity-service\";\n\nconst Login = () => {\n    const appState = useContext(AppContext);\n\n    const [loginData, setLoginData] = useState({ email: '', password: '' });\n    const [alertMessage, setAlertMessage] = useState('');\n\n    const logInCliced = async (e: Event) => {\n        e.preventDefault();\n        if (loginData.email === '' || loginData.password === '') {\n            setAlertMessage('Please insert email and password!');\n        };\n        setAlertMessage('');\n        let response = await IdentityService.Login('account/login', loginData);\n        if (!response.ok) {\n            setAlertMessage(response.messages![0]);\n        } else {\n            setAlertMessage('');\n            appState.setAuthInfo(response.data!.jwt, response.data!.firstname, response.data!.lastname);\n        }\n    }\n\n\n    return (\n        <>\n            {appState.jwt !== null ? <Redirect to=\"/\" /> : null}\n\n            <h1>Login</h1>\n            <form onSubmit={(e) => logInCliced(e.nativeEvent)}>\n                <div className=\"row\">\n                    <div className=\"col-md-6\">\n                        <section>\n                            <hr/>\n                            <Alert show={alertMessage !== ''} message={alertMessage} alertClass={EAlertClass.Danger}/>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"Input_Email\">Email</label>\n                                <input value={loginData.email} onChange={e => setLoginData({...loginData, email: e.target.value})}  className=\"form-control\" type=\"email\" id=\"Input_Email\" name=\"Input.Email\" placeholder=\"user@example.com\"  autoComplete=\"username\" />\n                            </div>\n                            <div className=\"form-group\">\n                                <label htmlFor=\"Input_Password\">Password</label>\n                                <input value={loginData.password} onChange={e => setLoginData({...loginData, password: e.target.value})} className=\"form-control\" type=\"password\" id=\"Input_Password\" name=\"Input.Password\" placeholder=\"Input your current password...\" autoComplete=\"current-password\" />\n                            </div>\n                            <div className=\"form-group\">\n                                <button onClick={(e) => logInCliced(e.nativeEvent)} type=\"submit\" className=\"btn btn-primary\">Login</button>\n                            </div>\n                        </section>\n                    </div>\n                </div>\n            </form>\n        </>\n    )\n\n}\n\nexport default Login;\n","const Page404 = () => {\n    return (\n        <div>Page not found - 404!</div>\n    );\n}\n\nexport default Page404;\n","import { useState } from \"react\";\n\ninterface IFormValues {\n    input: string;\n    checkbox: boolean;\n    radio: string;\n    textarea: string;\n    select: string;\n}\n\nexport interface IFormProps {\n    values: IFormValues;\n    handleChange: (target: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement) => void;\n}\n\nconst FormView = (props: IFormProps) => {\n    return (\n        <form>\n            <hr />\n            <div className=\"form-group\">\n                <label htmlFor=\"formInputText\">Text</label>\n                <input value={props.values.input} onChange={(e) => props.handleChange(e.target)} type=\"text\" className=\"form-control\" id=\"formInputText\" />\n            </div>\n            <hr />\n\n            <div className=\"form-group form-check\">\n                <input checked={props.values.checkbox} onChange={(e) => props.handleChange(e.target)} type=\"checkbox\" className=\"form-check-input\" id=\"formInputCheckbox\" />\n                <label className=\"form-check-label\" htmlFor=\"formInputCheckbox\">Checkbox</label>\n            </div>\n            <hr />\n\n            <div className=\"form-check\">\n                <input checked={props.values.radio === 'checked1'} onChange={(e) => props.handleChange(e.target)} className=\"form-check-input\" type=\"radio\" id=\"formInputRadio1\" value=\"checked1\" />\n                <label className=\"form-check-label\" htmlFor=\"formInputRadio1\">\n                    Radio 1\n                </label>\n            </div>\n            <div className=\"form-check\">\n                <input checked={props.values.radio === 'checked2'} onChange={(e) => props.handleChange(e.target)} className=\"form-check-input\" type=\"radio\" id=\"formInputRadio2\" value=\"checked2\" />\n                <label className=\"form-check-label\" htmlFor=\"formInputRadio2\">\n                    Radio 2\n                </label>\n            </div>\n            <hr />\n\n            <div className=\"mb-3\">\n                <label htmlFor=\"formIputTextarea\" className=\"form-label\">Textarea</label>\n                <textarea value={props.values.textarea} onChange={(e) => props.handleChange(e.target)} className=\"form-control\" id=\"formIputTextarea\" rows={3}></textarea>\n            </div>\n            <hr />\n\n            <div className=\"input-group mb-3\">\n                <label className=\"input-group-text\" htmlFor=\"formInputSelectList\">Selectlist</label>\n                <select value={props.values.select} onChange={(e) => props.handleChange(e.target)} className=\"form-select\" id=\"formInputSelectList\">\n                    <option value=\"1\">One</option>\n                    <option value=\"2\">Two</option>\n                    <option value=\"3\">Three</option>\n                </select>\n            </div>\n\n            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n        </form>\n    );\n}\n\nconst initialFormValues: IFormValues = {\n    input: '',\n    checkbox: false,\n    radio: '',\n    textarea: '',\n    select: '',\n}\n\n\n\nconst PageForm = () => {\n    const [formValues, setFormValues] = useState(initialFormValues);\n\n    const handleChange = (target: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement) => {\n\n        if (target.id === 'formInputText') {\n            setFormValues({ ...formValues, input: target.value });\n            return;\n        }\n\n        if (target.id === 'formInputCheckbox') {\n            setFormValues({ ...formValues, checkbox: (target as HTMLInputElement).checked });\n            return;\n        }\n\n        if (target.id === 'formInputRadio1') {\n            setFormValues({ ...formValues, radio: (target as HTMLInputElement).value });\n            return;\n        }\n\n        if (target.id === 'formInputRadio2') {\n            setFormValues({ ...formValues, radio: (target as HTMLInputElement).value });\n            return;\n        }\n\n        if (target.id === 'formIputTextarea') {\n            setFormValues({ ...formValues, textarea: target.value });\n            return;\n        }\n\n        if (target.id === 'formInputSelectList') {\n            setFormValues({ ...formValues, select: target.value });\n            return;\n        }\n\n    }\n\n    return <FormView values={formValues} handleChange={handleChange} />\n}\n\nexport default PageForm;\n","import React, { useState } from 'react';\nimport Header from './components/Header'\nimport Footer from './components/Footer';\nimport { Route, Switch } from 'react-router-dom';\nimport HomeIndex from './containers/home/HomeIndex';\nimport MealTypeIndex from './containers/meal-types/MealTypeIndex';\nimport MealTypeCreate from './containers/meal-types/MealTypeCreate';\nimport MealTypeEdit from './containers/meal-types/MealTypeEdit';\nimport MealTypeDetails from './containers/meal-types/MealTypeDetails';\nimport MealTypeDelete from './containers/meal-types/MealTypeDelete';\nimport Login from './containers/identity/Login';\nimport Page404 from './containers/Page404';\nimport PageForm from './containers/PageForm';\nimport { AppContextProvider, initialAppState } from './context/AppContext';\n\nfunction App() {\n\n    const setAuthInfo = (jwt: string | null, firstName: string, lastName: string): void => {\n        setAppState({ ...appState, jwt, firstName, lastName });\n    };\n\n    const [appState, setAppState] = useState({ ...initialAppState, setAuthInfo });\n\n    return (\n        <>\n            <AppContextProvider value={appState}>\n                <Header />\n                <div className=\"container\">\n                    <main role=\"main\" className=\"pb-3\">\n\n                        <Switch>\n                            <Route exact path=\"/\" component={HomeIndex} />\n                            <Route path=\"/form\" component={PageForm} />\n                            <Route path=\"/identity/login\" component={Login} />\n\n                            <Route path=\"/MealTypes/create\" component={MealTypeCreate} />\n                            <Route path=\"/MealTypes/edit/:id\" component={MealTypeEdit} />\n                            <Route path=\"/MealTypes/delete/:id\" component={MealTypeDelete} />\n                            <Route path=\"/MealTypes/:id\" component={MealTypeDetails} />\n                            <Route path=\"/MealTypes\" component={MealTypeIndex} />\n\n                            <Route component={Page404} />\n                        </Switch>\n\n                    </main>\n                </div>\n\n                <Footer />\n            </AppContextProvider>\n        </>\n    );\n}\n\nexport default App;\n","import 'jquery';\nimport 'popper.js';\nimport 'bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\nimport './assets/site.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter as Router } from 'react-router-dom';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <Router basename={process.env.PUBLIC_URL}>\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>,\n    </Router>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}